#!/usr/bin/env python

import os
import sys
import csv
import json
import logging
import argparse
import requests
from datetime import datetime, timedelta
from os.path import expanduser

try:
    import configparser  # Python 3
except ImportError:
    import ConfigParser as configparser  # Python 2 fallback

# Logger setup
logger = logging.getLogger(__name__)
FORMAT = "%(asctime)s {} {} - %(levelname)s - %(message)s".format(
    os.uname()[1], os.environ.get('technician', 'SYSTEM')
)
logging.basicConfig(format=FORMAT, level=os.environ.get('LOGLEVEL', 'INFO'))

# Config path
DEFAULT_CREDENTIALS_FILE = os.path.join(expanduser("~"), '.mitsogo/credentials')
configParser = configparser.ConfigParser()

def getconfig(profile, variable, environment, default=""):
    try:
        configParser.read(os.environ.get('SHARED_CREDENTIALS_FILE', DEFAULT_CREDENTIALS_FILE))
        value = configParser.get(profile, variable)
    except Exception:
        value = os.environ.get(environment, default)
    return value

def get_recent_repositories(gitlab_server, token, days):
    headers = {'Private-Token': token}
    since_date = datetime.utcnow() - timedelta(days=days)
    updated_after_iso = since_date.strftime('%Y-%m-%dT%H:%M:%SZ')

    url = f"{gitlab_server}/api/v4/projects?updated_after={updated_after_iso}&per_page=100&order_by=updated_at&sort=desc"
    
    repos = []
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            projects = response.json()
            for project in projects:
                repos.append([
                    project.get('name'),
                    project.get('web_url'),
                    project.get('last_activity_at'),
                    project.get('creator', {}).get('name', 'Unknown')
                ])
        else:
            logger.error(f"Failed to fetch projects: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"Exception while fetching updated repositories: {str(e)}")
    return repos

def generate_report(outputlist, outputfile):
    status = 1
    try:
        with open(outputfile, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['Repository Name', 'Web URL', 'Last Activity At', 'Created By'])
            writer.writerows(outputlist)
        logger.info(f"Report file {outputfile} generated successfully")
        status = 0
    except Exception as e:
        logger.error("Unable to generate report: " + str(e))
    return status

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="List GitLab repositories updated in the last N days.")
    parser.add_argument("server", type=str, help="GitLab server address (without protocol)")
    parser.add_argument("--days", type=int, default=7, help="Number of days to check for recent activity")
    parser.add_argument("--outputfile", default="recent_gitlab_repos.csv", help="Output CSV file path")
    args = parser.parse_args()

    gitlab_server = "http://" + args.server
    token = getconfig("gitlab", "token", "GITLAB_TOKEN")

    if not token:
        logger.error("GitLab token not found in credentials or environment.")
        sys.exit(1)

    repos = get_recent_repositories(gitlab_server, token, args.days)

    if repos:
        status = generate_report(repos, args.outputfile)
    else:
        logger.info("No repositories updated in the given period.")
        status = 0

    sys.exit(status)



#!/bin/sh

projectdir=$(readlink -f `dirname "$0"`)

PATH=$PATH:/home/mitsadmin/.local/bin

message() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') $HOSTNAME:$1"
}

message "info:changing working directory"
cd "$projectdir"

if [ ! -d reports ]; then
    message "info:creating reports directory"
    mkdir -p reports
fi

# GitLab server (change to actual GitLab hostname)
gitlab_server="gitlab.example.com"

# Number of days to check
days=7

# Output file
gitlab_report="./GitLab_recent_repos_report_$(date +'%Y%m%d').csv"

message "info:generating report for GitLab repositories updated in last $days days"
python ./gitlab_recent_repos.py "$gitlab_server" --days "$days" --outputfile "$gitlab_report"
exitcode=$?

if [ $exitcode -eq 0 ]; then
    message "info:successfully executed gitlab_recent_repos.py script"
else
    message "critical:failed to generate GitLab repo report with exit code $exitcode"
    exit 1
fi

if [ -f "$gitlab_report" ]; then
    message "info:uploading GitLab report to SharePoint"

    var=$(sharepointupload "$gitlab_report" --site "Devops Drive" \
        --drive_path /Devops_Scheduled_Reports/GitLab_recent_repos_report/)
    exitcode=$?
    link=$(echo "$var" | grep "sharing link" | cut -d : -f2-)

    if [ $exitcode -ne 0 ] || [ -z "$link" ]; then
        emailnotify "devops-team@mitsogo.com" \
            "Recently Updated GitLab Repositories" \
            "Report of GitLab repositories updated in the last $days days." \
            --mailfrom "devops-reports@hexnodemdmnotifications.com" \
            --attachment "$gitlab_report"
    else
        emailnotify "devops-team@mitsogo.com" \
            "Recently Updated GitLab Repositories" \
            "Report of GitLab repositories updated in the last $days days.\n${link}" \
            --mailfrom "devops-reports@hexnodemdmnotifications.com"
    fi

    exitcode=$?
    if [ $exitcode -ne 0 ]; then
        message "critical:error while sending email notification of GitLab repo report"
    else
        message "info:successfully delivered email notification of GitLab repo report"
        mv "$gitlab_report" reports/
    fi
else
    message "info:no updated repositories found in the last $days days"
fi

exit $exitcode
