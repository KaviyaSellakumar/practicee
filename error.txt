Started by user Kaviya  Sellakumar

Rebuilds build #26

[Pipeline] Start of Pipeline
[Pipeline] stage
[Pipeline] { (Sign Android)
[Pipeline] node
Running on Jenkins
 in /var/lib/jenkins/workspace/TEST_SIGN_MAC_ANDROID_APPS
[Pipeline] {
[Pipeline] sh
+ echo ANDROID 
ANDROID 
[Pipeline] withCredentials
Masking supported pattern matches of $ANDROID_PASSPHRASE or $AWS_SHARED_CREDENTIALS_FILE
[Pipeline] {
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ echo Workspace contents:
Workspace contents:
+ ls -l
total 0
[Pipeline] sh
+ find . -maxdepth 1 -type f ( -name *.apk -o -name *.aab )
+ head -n 1
[Pipeline] error
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // node
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Sign Mac/iOS)
Stage "Sign Mac/iOS" skipped due to earlier failure(s)
[Pipeline] getContext
[Pipeline] }
[Pipeline] // stage
[Pipeline] End of Pipeline
ERROR: INPUT_FILE is not set! Make sure a file was uploaded or S3 path is valid.
Finished: FAILURE







pipeline {
    agent none

    parameters {
        choice(name: 'PLATFORM', choices: ['ANDROID', 'MAC', 'IOS'], description: 'Choose the platform')
        choice(name: 'SOURCE_TYPE', choices: ['UPLOAD', 'S3'], description: 'Source: Upload or S3')
        file(name: 'UPLOAD', description: 'Upload file (used if SOURCE_TYPE is UPLOAD)')
        string(name: 'S3', defaultValue: '', description: 'S3 URL (used if SOURCE_TYPE is S3)')
    }

    stages {

        stage('Sign Android') {
            when {
                expression { params.PLATFORM == 'ANDROID' }
            }
            agent { label 'built-in' }

            steps {
                withCredentials([
                    string(credentialsId: 'ANDROID_KEY_PASSPHRASE', variable: 'ANDROID_PASSPHRASE'),
                    file(credentialsId: 'jenkins_aws_credential', variable: 'AWS_SHARED_CREDENTIALS_FILE')
                ]) {
                    script {
                        def inputFile = ''

                        if (params.SOURCE_TYPE == 'S3') {
                            echo "üì• Downloading from S3: ${params.S3}"
                            sh "aws s3 cp '${params.S3}' ./downloaded_file"
                            inputFile = 'downloaded_file'
                        } else {
                            sh "echo 'üìÇ Workspace contents:' && ls -lh"

                            def matchedFile = sh(
                                script: "find . -maxdepth 1 -type f \\( -iname '*.apk' -o -iname '*.aab' \\) | head -n 1",
                                returnStdout: true
                            ).trim()

                            if (!matchedFile) {
                                error "‚ùå No .apk or .aab file found in workspace."
                            }

                            inputFile = matchedFile.replaceFirst("^\\./", "")
                        }

                        echo "‚úÖ File to sign: ${inputFile}"
                        def ext = inputFile.tokenize('.').last()

                        if (ext == 'apk') {
                            sh """
                                apksigner sign \
                                --ks "$WORKSPACE/certificate.jks" \
                                --ks-key-alias "hexnodemdmapp" \
                                --ks-pass pass:$ANDROID_PASSPHRASE \
                                --key-pass pass:$ANDROID_PASSPHRASE \
                                --out "signed_${inputFile}" \
                                "${inputFile}"
                            """
                        } else if (ext == 'aab') {
                            sh """
                                jarsigner \
                                -keystore "$WORKSPACE/certificate.jks" \
                                -storepass "$ANDROID_PASSPHRASE" \
                                -keypass "$ANDROID_PASSPHRASE" \
                                -signedjar "signed_${inputFile}" \
                                "${inputFile}" hexnodemdmapp
                            """
                        } else {
                            error "‚ùå Unsupported Android file type: ${ext}"
                        }
                    }
                }
            }
        }

        stage('Sign Mac/iOS') {
            when {
                expression { params.PLATFORM == 'MAC' || params.PLATFORM == 'IOS' }
            }
            agent { label 'mac_mini_kochi' }

            steps {
                withCredentials([
                    string(credentialsId: 'NOTARY_PASSWORD', variable: 'MAC'),
                    file(credentialsId: 'jenkins_aws_credential', variable: 'AWS_SHARED_CREDENTIALS_FILE')
                ]) {
                    script {
                        def inputFile = ''

                        if (params.SOURCE_TYPE == 'S3') {
                            echo "üì• Downloading from S3: ${params.S3}"
                            sh "aws s3 cp '${params.S3}' ./downloaded_file"
                            inputFile = 'downloaded_file'
                        } else {
                            sh "echo 'üìÇ Workspace contents:' && ls -lh"

                            def matchedFile = sh(
                                script: "find . -maxdepth 1 -type f \\( -iname '*.ipa' -o -iname '*.zip' \\) | head -n 1",
                                returnStdout: true
                            ).trim()

                            if (!matchedFile) {
                                error "‚ùå No .ipa or .zip file found in workspace."
                            }

                            inputFile = matchedFile.replaceFirst("^\\./", "")
                        }

                        echo "‚úÖ File to sign: ${inputFile}"
                        def ext = inputFile.tokenize('.').last()
                        def fileName = inputFile.tokenize('/').last()
                        def baseName = fileName.replace(".${ext}", "")

                        if (ext == 'ipa') {
                            sh "xcrun altool --sign --file '${inputFile}'"
                        } else if (ext == 'zip') {
                            sh """
                                unzip '${inputFile}'
                                codesign -f --sign "Developer ID Application: Mitsogo Inc (BX6L6CPUN8)" "${baseName}.app"
                                ditto -c -k --sequesterRsrc --keepParent "${baseName}.app" "${baseName}.app.zip"
                            """
                        } else {
                            error "‚ùå Unsupported Mac/iOS file type: ${ext}"
                        }
                    }
                }
            }
        }

    }
}
